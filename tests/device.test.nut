/**
 * Serializer Library test cases
 *
 */
@include "Serializer.class.nut"

class SerializerTestCase extends ImpTestCase {

    _rawData = null;
    _serializedData = null;
    _validData = null;

    /**
     * Get the imp Type (impp04m or imp006)
     */
    function setUp() {

        _rawData = {
            "foo": "bar",
            "timestamps": [ 1436983175, 1436984975, 1436986775, 1436988575, 1436990375],
            "readings": [ 32.5, 33.6, 32.8, 32.9, 32.5 ],
            "otherData": {
                "state": true,
                "test": "test"
            }
        }

        // Data generated from the above using `Serializer.class.nut:1.0.0`
        local data = [0xe0,0x00,0xe5,0x74,0x00,0x04,0x73,0x00,0x08,0x72,0x65,0x61,0x64,0x69,0x6e,0x67,0x73,0x61,0x00,0x05,0x69,0x00,0x01,0x30,0x46,0x00,0x04,0x00,0x00,0x02,0x42,0x69,0x00,0x01,0x31,0x46,0x00,0x04,0x66,0x66,0x06,0x42,0x69,0x00,0x01,0x32,0x46,0x00,0x04,0x33,0x33,0x03,0x42,0x69,0x00,0x01,0x33,0x46,0x00,0x04,0x9a,0x99,0x03,0x42,0x69,0x00,0x01,0x34,0x46,0x00,0x04,0x00,0x00,0x02,0x42,0x73,0x00,0x09,0x6f,0x74,0x68,0x65,0x72,0x44,0x61,0x74,0x61,0x74,0x00,0x02,0x73,0x00,0x04,0x74,0x65,0x73,0x74,0x73,0x00,0x04,0x74,0x65,0x73,0x74,0x73,0x00,0x05,0x73,0x74,0x61,0x74,0x65,0x62,0x01,0x73,0x00,0x0a,0x74,0x69,0x6d,0x65,0x73,0x74,0x61,0x6d,0x70,0x73,0x61,0x00,0x05,0x69,0x00,0x01,0x30,0x69,0x00,0x0a,0x31,0x34,0x33,0x36,0x39,0x38,0x33,0x31,0x37,0x35,0x69,0x00,0x01,0x31,0x69,0x00,0x0a,0x31,0x34,0x33,0x36,0x39,0x38,0x34,0x39,0x37,0x35,0x69,0x00,0x01,0x32,0x69,0x00,0x0a,0x31,0x34,0x33,0x36,0x39,0x38,0x36,0x37,0x37,0x35,0x69,0x00,0x01,0x33,0x69,0x00,0x0a,0x31,0x34,0x33,0x36,0x39,0x38,0x38,0x35,0x37,0x35,0x69,0x00,0x01,0x34,0x69,0x00,0x0a,0x31,0x34,0x33,0x36,0x39,0x39,0x30,0x33,0x37,0x35,0x73,0x00,0x03,0x66,0x6f,0x6f,0x73,0x00,0x03,0x62,0x61,0x72];

        _validData = blob(data.len());
        _validData.seek(0, 'b');
        foreach(value in data) {
            _validData.writen(value, 'b');
        }

        _serializedData = Serializer.serialize(_rawData);
    }

    function testSerialize() {

        // CHECK OUTPUT CORRECT
        this.assertTrue(_serializedData.len() == _validData.len());
    }

    function testDeserialize() {

        local outData = Serializer.deserialize(_serializedData);

        // COMPARE TO ORIGINAL DATA
        this.assertTrue(outData.otherData.state);
        this.assertTrue(outData.otherData.test == _rawData.otherData.test);
        this.assertTrue(outData.readings[1] == _rawData.readings[1]);
        this.assertTrue(outData.readings[2] == _rawData.readings[2]);
        this.assertTrue(outData.timestamps[4] == _rawData.timestamps[4]);
        this.assertTrue(outData.timestamps[0] == _rawData.timestamps[0]);
        this.assertTrue(outData.foo == _rawData.foo);

        // DESERIALIZE v.1 DATA
        local v1Data = Serializer.deserialize(_validData);
        this.assertTrue(v1Data.otherData.state);
        this.assertTrue(v1Data.otherData.test == _rawData.otherData.test);
        this.assertTrue(v1Data.readings[1] == _rawData.readings[1]);
        this.assertTrue(v1Data.readings[2] == _rawData.readings[2]);
        this.assertTrue(v1Data.timestamps[4] == _rawData.timestamps[4]);
        this.assertTrue(v1Data.timestamps[0] == _rawData.timestamps[0]);
        this.assertTrue(v1Data.foo == _rawData.foo);
    }
}